{"data":{"codeExamples":{"edges":[{"node":{"id":"a-component-using-external-plugins","code":"class MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { value: 'Hello, **world**!' };\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  getRawMarkup() {\n    const md = new Remarkable();\n    return { __html: md.render(this.state.value) };\n  }\n\n  render() {\n    return (\n      <div className=\"MarkdownEditor\">\n        <h3>Input</h3>\n        <label htmlFor=\"markdown-content\">\n          Enter some markdown\n        </label>\n        <textarea\n          id=\"markdown-content\"\n          onChange={this.handleChange}\n          defaultValue={this.state.value}\n        />\n        <h3>Output</h3>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <MarkdownEditor />,\n  document.getElementById('markdown-example')\n);\n","mdAbsolutePath":"/home/masious/myworkspace/reactjs.org/content/home/examples/a-component-using-external-plugins.md"}},{"node":{"id":"a-simple-component","code":"class HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        Hello {this.props.name}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name=\"Masoud\" />,\n  document.getElementById('hello-example')\n);","mdAbsolutePath":"/home/masious/myworkspace/reactjs.org/content/home/examples/a-simple-component.md"}},{"node":{"id":"a-stateful-component","code":"class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Seconds: {this.state.seconds}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Timer />,\n  document.getElementById('timer-example')\n);","mdAbsolutePath":"/home/masious/myworkspace/reactjs.org/content/home/examples/a-stateful-component.md"}},{"node":{"id":"an-application","code":"class TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>لیست کار‌ها</h3>\n        <TodoList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            چه‌کاری هست که باید انجام شود؟\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>\n            افزودن #{this.state.items.length + 1}\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (!this.state.text.length) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('todos-example')\n);\n","mdAbsolutePath":"/home/masious/myworkspace/reactjs.org/content/home/examples/an-application.md"}}]},"examples":{"edges":[{"node":{"fileAbsolutePath":"/home/masious/myworkspace/reactjs.org/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"یک کمپوننت ساده","domid":"hello-example"},"html":"<p>کمپوننت‌های ری‌اکت یک متد به نام\n<code class=\"gatsby-code-text\">render()</code>\nرا پیاده‌سازی می‌کنند که داده‌های ورودی را گرفته و محتوای نمایشی را باز می‌گردانند. این مثال از یک سینتکس\nXML\n-مانند به نام\nJSX\nاستفاده می‌کند. داده ورودی که به کمپوننت داده می‌شود می‌تواند در\n<code class=\"gatsby-code-text\">render()</code>\nبا استفاده از\n<code class=\"gatsby-code-text\">react.props</code>\nاستفاده شود.</p>\n<p><strong>برای استفاده از ری‌اکت، یادگیری\nJSX\nالزامی نیست.</strong>\nهمچنین می‌توانید از این\n<a href=\"https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA\" target=\"_blank\" rel=\"noreferrer\">Babel REPL</a>\nبرای مشاهده نمونه خروجی\nJSX\nاستفاده کنید.</p>"}},{"node":{"fileAbsolutePath":"/home/masious/myworkspace/reactjs.org/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"یک کمپوننت حالت‌دار","domid":"timer-example"},"html":"<p>علاوه بر گرفتن داده ورودی\n(که می‌تواند با\n<code class=\"gatsby-code-text\">this.props</code>\nدر دسترس قرار گیرد\n)، یک کمپوننت می‌تواند از اطلاعات حالت داخلی خود نگه‌داری کند(\nکه می‌تواند با\n<code class=\"gatsby-code-text\">this.state</code>\nدر دسترس قرار گیرد).\nوقتی داده حالت یک کمپوننت تغییر می‌کند، خروجی ترسیم شده با استفاده از\n<code class=\"gatsby-code-text\">render</code>\nآپدیت می‌شود.</p>"}},{"node":{"fileAbsolutePath":"/home/masious/myworkspace/reactjs.org/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"یک اپلیکیشن","domid":"todos-example"},"html":"<p>با استفاده از\n<code class=\"gatsby-code-text\">props</code>\nو\n<code class=\"gatsby-code-text\">state</code>،\nمی‌توانیم یک اپلیکیشن ساده «لیست کار‌ها» بسازیم. این مثال از\n<code class=\"gatsby-code-text\">state</code>\nبرای یافتن لیست جاری کار‌ها و هم‌چنین متن وارد شده توسط کاربر، استفاده می‌کند.\nاگر چه ایونت‌هندلر ها به نظر می‌رسد که به طور\ninline\nتعریف شده‌باشند، جمع‌‌آوری شده و با استفاده از\nevent delegation\nپیاده‌سازی می‌شوند.</p>"}},{"node":{"fileAbsolutePath":"/home/masious/myworkspace/reactjs.org/content/home/examples/a-component-using-external-plugins.md","fields":{"slug":"/home/examples/a-component-using-external-plugins.html"},"frontmatter":{"title":"A Component Using External Plugins","domid":"markdown-example"},"html":"<p>React is flexible and provides hooks that allow you to interface with other libraries and frameworks. This example uses <strong>remarkable</strong>, an external Markdown library, to convert the <code class=\"gatsby-code-text\">&lt;textarea&gt;</code>’s value in real time.</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"شفاف"},"html":"<p>ری‌اکت ساخت رابط‌های کاربری پویا را بی‌درد می‌سازد. المان‌های ساده برای هر حالتی از برنامه خود طراحی کنید، و ری‌اکت کمپو‌نت‌های درست را انتخاب خواهد‌کرد برای نمایش و آپدیت، وقتی که داده عوض می‌شود، </p>\n<p>المان‌های شفاف، کد شما را قابل پیش‌بینی کرده و دیباگ کردن آنها را ساده تر می‌سازد.</p>"}},{"node":{"frontmatter":{"title":"بر پایه کمپوننت‌ها"},"html":"<p>کمپوننت‌های ایزوله بسازید تا حالت خود را مدیریت کنند و از آن‌ها برای ساخت روابط کاربری پیچیده استفاده کنید.</p>\n<p>از آنجایی که منطق هر کمپوننت به جای تمپلیت‌ها با جاوا اسکریپت نوشته‌می‌شود، به سادگی می‌توانید داده‌های خود را در برنامه دست به دست کرده و فاصله‌ای را با DOM داشته‌باشید.</p>"}},{"node":{"frontmatter":{"title":"یک‌بار یاد بگیرید، همه‌جا استفاده کنید."},"html":"<p>ما در مورد بقیه استک تکنولوژی شما حدسی نمی‌زنیم، که شما بتوانید فیچر‌های جدید را بدون این که مجبور باشید کد را دوباره بنویسید، اضافه کنید.</p>\n<p>ری‌اکت همچنین می‌تواند در سرور با استفاده از قدرت Node و در موبایل‌ها با استفاده از <a href=\"https://facebook.github.io/react-native/\">React Native</a> استفاده شود.</p>"}}]}},"pageContext":{}}